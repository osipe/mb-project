/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.mb.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.mb.model.LichSuThuPhatChi;
import com.mb.model.LichSuThuPhatChiModel;
import com.mb.model.LichSuThuPhatChiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LichSuThuPhatChi service. Represents a row in the &quot;mb_lichsuthuphatchi&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>LichSuThuPhatChiModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LichSuThuPhatChiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LichSuThuPhatChiImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LichSuThuPhatChiModelImpl
	extends BaseModelImpl<LichSuThuPhatChi> implements LichSuThuPhatChiModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lich su thu phat chi model instance should use the <code>LichSuThuPhatChi</code> interface instead.
	 */
	public static final String TABLE_NAME = "mb_lichsuthuphatchi";

	public static final Object[][] TABLE_COLUMNS = {
		{"lichSuThuPhatChiId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"phatVayId", Types.BIGINT},
		{"maCTV", Types.VARCHAR}, {"soTien", Types.DOUBLE},
		{"tongSoTienVonTra", Types.DOUBLE}, {"tongSoTienLaiTra", Types.DOUBLE},
		{"ngayXuLy", Types.TIMESTAMP}, {"loai", Types.INTEGER},
		{"trangThaiPhatVayHienTai", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lichSuThuPhatChiId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("phatVayId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("maCTV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soTien", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tongSoTienVonTra", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tongSoTienLaiTra", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ngayXuLy", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("loai", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trangThaiPhatVayHienTai", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table mb_lichsuthuphatchi (lichSuThuPhatChiId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,phatVayId LONG,maCTV VARCHAR(75) null,soTien DOUBLE,tongSoTienVonTra DOUBLE,tongSoTienLaiTra DOUBLE,ngayXuLy DATE null,loai INTEGER,trangThaiPhatVayHienTai INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table mb_lichsuthuphatchi";

	public static final String ORDER_BY_JPQL =
		" ORDER BY lichSuThuPhatChi.lichSuThuPhatChiId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY mb_lichsuthuphatchi.lichSuThuPhatChiId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.mb.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.mb.model.LichSuThuPhatChi"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.mb.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.mb.model.LichSuThuPhatChi"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.mb.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.mb.model.LichSuThuPhatChi"),
		true);

	public static final long LOAI_COLUMN_BITMASK = 1L;

	public static final long MACTV_COLUMN_BITMASK = 2L;

	public static final long PHATVAYID_COLUMN_BITMASK = 4L;

	public static final long LICHSUTHUPHATCHIID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LichSuThuPhatChi toModel(LichSuThuPhatChiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LichSuThuPhatChi model = new LichSuThuPhatChiImpl();

		model.setLichSuThuPhatChiId(soapModel.getLichSuThuPhatChiId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPhatVayId(soapModel.getPhatVayId());
		model.setMaCTV(soapModel.getMaCTV());
		model.setSoTien(soapModel.getSoTien());
		model.setTongSoTienVonTra(soapModel.getTongSoTienVonTra());
		model.setTongSoTienLaiTra(soapModel.getTongSoTienLaiTra());
		model.setNgayXuLy(soapModel.getNgayXuLy());
		model.setLoai(soapModel.getLoai());
		model.setTrangThaiPhatVayHienTai(
			soapModel.getTrangThaiPhatVayHienTai());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LichSuThuPhatChi> toModels(
		LichSuThuPhatChiSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<LichSuThuPhatChi> models = new ArrayList<LichSuThuPhatChi>(
			soapModels.length);

		for (LichSuThuPhatChiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.mb.service.util.ServiceProps.get(
			"lock.expiration.time.com.mb.model.LichSuThuPhatChi"));

	public LichSuThuPhatChiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lichSuThuPhatChiId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLichSuThuPhatChiId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lichSuThuPhatChiId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LichSuThuPhatChi.class;
	}

	@Override
	public String getModelClassName() {
		return LichSuThuPhatChi.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LichSuThuPhatChi, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LichSuThuPhatChi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LichSuThuPhatChi, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LichSuThuPhatChi)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LichSuThuPhatChi, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LichSuThuPhatChi, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LichSuThuPhatChi)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LichSuThuPhatChi, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LichSuThuPhatChi, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<LichSuThuPhatChi, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LichSuThuPhatChi, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LichSuThuPhatChi, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<LichSuThuPhatChi, Object>>();
		Map<String, BiConsumer<LichSuThuPhatChi, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LichSuThuPhatChi, ?>>();

		attributeGetterFunctions.put(
			"lichSuThuPhatChiId",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getLichSuThuPhatChiId();
				}

			});
		attributeSetterBiConsumers.put(
			"lichSuThuPhatChiId",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi,
					Object lichSuThuPhatChiId) {

					lichSuThuPhatChi.setLichSuThuPhatChiId(
						(Long)lichSuThuPhatChiId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object companyId) {

					lichSuThuPhatChi.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object groupId) {

					lichSuThuPhatChi.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object userId) {

					lichSuThuPhatChi.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object userName) {

					lichSuThuPhatChi.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object createDate) {

					lichSuThuPhatChi.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object modifiedDate) {

					lichSuThuPhatChi.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"phatVayId",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getPhatVayId();
				}

			});
		attributeSetterBiConsumers.put(
			"phatVayId",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object phatVayId) {

					lichSuThuPhatChi.setPhatVayId((Long)phatVayId);
				}

			});
		attributeGetterFunctions.put(
			"maCTV",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getMaCTV();
				}

			});
		attributeSetterBiConsumers.put(
			"maCTV",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object maCTV) {

					lichSuThuPhatChi.setMaCTV((String)maCTV);
				}

			});
		attributeGetterFunctions.put(
			"soTien",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getSoTien();
				}

			});
		attributeSetterBiConsumers.put(
			"soTien",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object soTien) {

					lichSuThuPhatChi.setSoTien((Double)soTien);
				}

			});
		attributeGetterFunctions.put(
			"tongSoTienVonTra",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getTongSoTienVonTra();
				}

			});
		attributeSetterBiConsumers.put(
			"tongSoTienVonTra",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi,
					Object tongSoTienVonTra) {

					lichSuThuPhatChi.setTongSoTienVonTra(
						(Double)tongSoTienVonTra);
				}

			});
		attributeGetterFunctions.put(
			"tongSoTienLaiTra",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getTongSoTienLaiTra();
				}

			});
		attributeSetterBiConsumers.put(
			"tongSoTienLaiTra",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi,
					Object tongSoTienLaiTra) {

					lichSuThuPhatChi.setTongSoTienLaiTra(
						(Double)tongSoTienLaiTra);
				}

			});
		attributeGetterFunctions.put(
			"ngayXuLy",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getNgayXuLy();
				}

			});
		attributeSetterBiConsumers.put(
			"ngayXuLy",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object ngayXuLy) {

					lichSuThuPhatChi.setNgayXuLy((Date)ngayXuLy);
				}

			});
		attributeGetterFunctions.put(
			"loai",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getLoai();
				}

			});
		attributeSetterBiConsumers.put(
			"loai",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi, Object loai) {

					lichSuThuPhatChi.setLoai((Integer)loai);
				}

			});
		attributeGetterFunctions.put(
			"trangThaiPhatVayHienTai",
			new Function<LichSuThuPhatChi, Object>() {

				@Override
				public Object apply(LichSuThuPhatChi lichSuThuPhatChi) {
					return lichSuThuPhatChi.getTrangThaiPhatVayHienTai();
				}

			});
		attributeSetterBiConsumers.put(
			"trangThaiPhatVayHienTai",
			new BiConsumer<LichSuThuPhatChi, Object>() {

				@Override
				public void accept(
					LichSuThuPhatChi lichSuThuPhatChi,
					Object trangThaiPhatVayHienTai) {

					lichSuThuPhatChi.setTrangThaiPhatVayHienTai(
						(Integer)trangThaiPhatVayHienTai);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getLichSuThuPhatChiId() {
		return _lichSuThuPhatChiId;
	}

	@Override
	public void setLichSuThuPhatChiId(long lichSuThuPhatChiId) {
		_columnBitmask = -1L;

		_lichSuThuPhatChiId = lichSuThuPhatChiId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getPhatVayId() {
		return _phatVayId;
	}

	@Override
	public void setPhatVayId(long phatVayId) {
		_columnBitmask |= PHATVAYID_COLUMN_BITMASK;

		if (!_setOriginalPhatVayId) {
			_setOriginalPhatVayId = true;

			_originalPhatVayId = _phatVayId;
		}

		_phatVayId = phatVayId;
	}

	public long getOriginalPhatVayId() {
		return _originalPhatVayId;
	}

	@JSON
	@Override
	public String getMaCTV() {
		if (_maCTV == null) {
			return "";
		}
		else {
			return _maCTV;
		}
	}

	@Override
	public void setMaCTV(String maCTV) {
		_columnBitmask |= MACTV_COLUMN_BITMASK;

		if (_originalMaCTV == null) {
			_originalMaCTV = _maCTV;
		}

		_maCTV = maCTV;
	}

	public String getOriginalMaCTV() {
		return GetterUtil.getString(_originalMaCTV);
	}

	@JSON
	@Override
	public Double getSoTien() {
		return _soTien;
	}

	@Override
	public void setSoTien(Double soTien) {
		_soTien = soTien;
	}

	@JSON
	@Override
	public Double getTongSoTienVonTra() {
		return _tongSoTienVonTra;
	}

	@Override
	public void setTongSoTienVonTra(Double tongSoTienVonTra) {
		_tongSoTienVonTra = tongSoTienVonTra;
	}

	@JSON
	@Override
	public Double getTongSoTienLaiTra() {
		return _tongSoTienLaiTra;
	}

	@Override
	public void setTongSoTienLaiTra(Double tongSoTienLaiTra) {
		_tongSoTienLaiTra = tongSoTienLaiTra;
	}

	@JSON
	@Override
	public Date getNgayXuLy() {
		return _ngayXuLy;
	}

	@Override
	public void setNgayXuLy(Date ngayXuLy) {
		_ngayXuLy = ngayXuLy;
	}

	@JSON
	@Override
	public int getLoai() {
		return _loai;
	}

	@Override
	public void setLoai(int loai) {
		_columnBitmask |= LOAI_COLUMN_BITMASK;

		if (!_setOriginalLoai) {
			_setOriginalLoai = true;

			_originalLoai = _loai;
		}

		_loai = loai;
	}

	public int getOriginalLoai() {
		return _originalLoai;
	}

	@JSON
	@Override
	public int getTrangThaiPhatVayHienTai() {
		return _trangThaiPhatVayHienTai;
	}

	@Override
	public void setTrangThaiPhatVayHienTai(int trangThaiPhatVayHienTai) {
		_trangThaiPhatVayHienTai = trangThaiPhatVayHienTai;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LichSuThuPhatChi.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LichSuThuPhatChi toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LichSuThuPhatChi)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LichSuThuPhatChiImpl lichSuThuPhatChiImpl = new LichSuThuPhatChiImpl();

		lichSuThuPhatChiImpl.setLichSuThuPhatChiId(getLichSuThuPhatChiId());
		lichSuThuPhatChiImpl.setCompanyId(getCompanyId());
		lichSuThuPhatChiImpl.setGroupId(getGroupId());
		lichSuThuPhatChiImpl.setUserId(getUserId());
		lichSuThuPhatChiImpl.setUserName(getUserName());
		lichSuThuPhatChiImpl.setCreateDate(getCreateDate());
		lichSuThuPhatChiImpl.setModifiedDate(getModifiedDate());
		lichSuThuPhatChiImpl.setPhatVayId(getPhatVayId());
		lichSuThuPhatChiImpl.setMaCTV(getMaCTV());
		lichSuThuPhatChiImpl.setSoTien(getSoTien());
		lichSuThuPhatChiImpl.setTongSoTienVonTra(getTongSoTienVonTra());
		lichSuThuPhatChiImpl.setTongSoTienLaiTra(getTongSoTienLaiTra());
		lichSuThuPhatChiImpl.setNgayXuLy(getNgayXuLy());
		lichSuThuPhatChiImpl.setLoai(getLoai());
		lichSuThuPhatChiImpl.setTrangThaiPhatVayHienTai(
			getTrangThaiPhatVayHienTai());

		lichSuThuPhatChiImpl.resetOriginalValues();

		return lichSuThuPhatChiImpl;
	}

	@Override
	public int compareTo(LichSuThuPhatChi lichSuThuPhatChi) {
		int value = 0;

		if (getLichSuThuPhatChiId() <
				lichSuThuPhatChi.getLichSuThuPhatChiId()) {

			value = -1;
		}
		else if (getLichSuThuPhatChiId() >
					lichSuThuPhatChi.getLichSuThuPhatChiId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LichSuThuPhatChi)) {
			return false;
		}

		LichSuThuPhatChi lichSuThuPhatChi = (LichSuThuPhatChi)obj;

		long primaryKey = lichSuThuPhatChi.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LichSuThuPhatChiModelImpl lichSuThuPhatChiModelImpl = this;

		lichSuThuPhatChiModelImpl._setModifiedDate = false;

		lichSuThuPhatChiModelImpl._originalPhatVayId =
			lichSuThuPhatChiModelImpl._phatVayId;

		lichSuThuPhatChiModelImpl._setOriginalPhatVayId = false;

		lichSuThuPhatChiModelImpl._originalMaCTV =
			lichSuThuPhatChiModelImpl._maCTV;

		lichSuThuPhatChiModelImpl._originalLoai =
			lichSuThuPhatChiModelImpl._loai;

		lichSuThuPhatChiModelImpl._setOriginalLoai = false;

		lichSuThuPhatChiModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LichSuThuPhatChi> toCacheModel() {
		LichSuThuPhatChiCacheModel lichSuThuPhatChiCacheModel =
			new LichSuThuPhatChiCacheModel();

		lichSuThuPhatChiCacheModel.lichSuThuPhatChiId = getLichSuThuPhatChiId();

		lichSuThuPhatChiCacheModel.companyId = getCompanyId();

		lichSuThuPhatChiCacheModel.groupId = getGroupId();

		lichSuThuPhatChiCacheModel.userId = getUserId();

		lichSuThuPhatChiCacheModel.userName = getUserName();

		String userName = lichSuThuPhatChiCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			lichSuThuPhatChiCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			lichSuThuPhatChiCacheModel.createDate = createDate.getTime();
		}
		else {
			lichSuThuPhatChiCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lichSuThuPhatChiCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lichSuThuPhatChiCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lichSuThuPhatChiCacheModel.phatVayId = getPhatVayId();

		lichSuThuPhatChiCacheModel.maCTV = getMaCTV();

		String maCTV = lichSuThuPhatChiCacheModel.maCTV;

		if ((maCTV != null) && (maCTV.length() == 0)) {
			lichSuThuPhatChiCacheModel.maCTV = null;
		}

		lichSuThuPhatChiCacheModel.soTien = getSoTien();

		lichSuThuPhatChiCacheModel.tongSoTienVonTra = getTongSoTienVonTra();

		lichSuThuPhatChiCacheModel.tongSoTienLaiTra = getTongSoTienLaiTra();

		Date ngayXuLy = getNgayXuLy();

		if (ngayXuLy != null) {
			lichSuThuPhatChiCacheModel.ngayXuLy = ngayXuLy.getTime();
		}
		else {
			lichSuThuPhatChiCacheModel.ngayXuLy = Long.MIN_VALUE;
		}

		lichSuThuPhatChiCacheModel.loai = getLoai();

		lichSuThuPhatChiCacheModel.trangThaiPhatVayHienTai =
			getTrangThaiPhatVayHienTai();

		return lichSuThuPhatChiCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LichSuThuPhatChi, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LichSuThuPhatChi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LichSuThuPhatChi, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LichSuThuPhatChi)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LichSuThuPhatChi, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LichSuThuPhatChi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LichSuThuPhatChi, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LichSuThuPhatChi)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		LichSuThuPhatChi.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		LichSuThuPhatChi.class, ModelWrapper.class
	};

	private long _lichSuThuPhatChiId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _phatVayId;
	private long _originalPhatVayId;
	private boolean _setOriginalPhatVayId;
	private String _maCTV;
	private String _originalMaCTV;
	private Double _soTien;
	private Double _tongSoTienVonTra;
	private Double _tongSoTienLaiTra;
	private Date _ngayXuLy;
	private int _loai;
	private int _originalLoai;
	private boolean _setOriginalLoai;
	private int _trangThaiPhatVayHienTai;
	private long _columnBitmask;
	private LichSuThuPhatChi _escapedModel;

}